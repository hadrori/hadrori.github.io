<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDPC | Algoogle]]></title>
  <link href="http://algoogle.hadrori.jp/categories/tdpc/atom.xml" rel="self"/>
  <link href="http://algoogle.hadrori.jp/"/>
  <updated>2015-07-30T15:13:28+09:00</updated>
  <id>http://algoogle.hadrori.jp/</id>
  <author>
    <name><![CDATA[hadrori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Typical DP Contest A - コンテスト]]></title>
    <link href="http://algoogle.hadrori.jp/tdpc/a/"/>
    <updated>2014-05-13T17:48:35+09:00</updated>
    <id>http://algoogle.hadrori.jp/tdpc/a</id>
    <content type="html"><![CDATA[<p><a href="http://tdpc.contest.atcoder.jp/tasks/tdpc_contest">A - コンテスト</a></p>

<h4 id="section">問題概要</h4>

<hr />

<h4 id="section-1">解法</h4>

<hr />

<p>点数の情報を追加するたびにそれまでのの点数の情報から出来るパターンに<br />
新しい点数を足したものを追加する.
dp[i + p] |= dp[i]<br />
みたいにする. 上書きしていってるので, iは大きい方から処理していく.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code TDPC/A.d %}</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typical DP Contest B - ゲーム]]></title>
    <link href="http://algoogle.hadrori.jp/tdpc/b/"/>
    <updated>2014-05-13T17:43:13+09:00</updated>
    <id>http://algoogle.hadrori.jp/tdpc/b</id>
    <content type="html"><![CDATA[<p><a href="http://tdpc.contest.atcoder.jp/tasks/tdpc_game">B - ゲーム</a></p>

<h4 id="section">問題概要</h4>

<hr />

<h4 id="section-1">解法</h4>

<p>#code1<br />
メモをペアにして, ペアを交互に見ることで順番に最善手を尽くすようにした.</p>

<p>#code2<br />
dp[i][j] := 左の山が i 個, 右の山が j このこっている状態からスタートするときの先手の取るものの価値の和</p>

<hr />

<h4 id="section-2">コード</h4>

<hr />

<p>#code2
{% include_code TDPC/B.d %}</p>

<p>#code2
{% include_code TDPC/B.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typical DP Contest C - トーナメント]]></title>
    <link href="http://algoogle.hadrori.jp/tdpc/c/"/>
    <updated>2014-05-13T17:20:33+09:00</updated>
    <id>http://algoogle.hadrori.jp/tdpc/c</id>
    <content type="html"><![CDATA[<p><a href="http://tdpc.contest.atcoder.jp/tasks/tdpc_tournament">C - トーナメント</a></p>

<h4 id="section">問題概要</h4>

<hr />

<h4 id="section-1">解法</h4>

<hr />

<p>m人目がnラウンド目を勝つ確率をメモ化再帰した #Code1</p>

<p>{% math %}</p>

<p>memo[m][n] = \sum_{i = left}^{right} memo[m][n-1] * memo[i][n-1] /(1 + 10^{(R_i-R_m)/400})</p>

<p>{% endmath %}</p>

<p>left, rightは2分木のmのn-1ラウンド目のところの兄弟を根とした葉の範囲</p>

<p><img src="/images/tdpc-c-01.png" alt="tdpc-c" /></p>

<p>DP解 #Code2</p>

<p>{% math %}</p>

<p>dp[j][0] = 0</p>

<p>{% endmath %}</p>

<p>{% math %}</p>

<p>dp[j][i] = \sum_{a = left}^{right} dp[j][i-1] * dp[a][i-1] /(1 + 10^{(R_a-R_j)/400})</p>

<p>{% endmath %}</p>

<h4 id="section-2">コード</h4>

<hr />

<p>#code1</p>

<p>{% include_code TDPC/C.d %}</p>

<p>#code2</p>

<p>{% include_code TDPC/C.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typical DP Contest D - サイコロ]]></title>
    <link href="http://algoogle.hadrori.jp/tdpc/d/"/>
    <updated>2014-05-13T17:18:53+09:00</updated>
    <id>http://algoogle.hadrori.jp/tdpc/d</id>
    <content type="html"><![CDATA[<p><a href="http://tdpc.contest.atcoder.jp/tasks/tdpc_dice">D - サイコロ</a></p>

<h4 id="section">問題概要</h4>

<hr />

<h4 id="section-1">解法</h4>

<hr />

<p>dp[i][j][k][l] := i回サイコロを振って2^j 3^k 5^l
になる確率. ただし, j,k,lがDの素因数の指数部分より大きい場合は
Dの指数部分の大きさに合わせることで, Dの倍数の確率も合わせて見ることが出来る.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code TDPC/D.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Typical DP Contest E - 数]]></title>
    <link href="http://algoogle.hadrori.jp/tdpc/e/"/>
    <updated>2014-05-13T17:10:33+09:00</updated>
    <id>http://algoogle.hadrori.jp/tdpc/e</id>
    <content type="html"><![CDATA[<p><a href="http://tdpc.contest.atcoder.jp/tasks/tdpc_number">E - 数</a></p>

<h4 id="section">問題概要</h4>

<hr />

<h4 id="section-1">解法</h4>

<hr />

<p>len : Nの桁数<br />
一番左の桁から数を0~9までまわしてそれまでの合計をDでmodとったものを保存していく.<br />
dp[i][j][k] : 左からi桁目まででDでmodをとったものがjになる数. kは数がN未満かどうか.<br />
数がN以上かは, 前の状態がN以上かつ, 回してる数字がNのその桁の数以上.<br />
それらは基本的に無視するが, すべての桁が同じ場合は答えに含めるので,<br />
例外として同じ数字の時はカウントしておく. (テストケース弱いのでカウントしなくても通りはする)<br />
dp[len][0][1] + dp[len][0][0] - 1<br />
が答えになる. -1は倍数として0もカウントしてるから.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code TDPC/E.cpp %}</p>
]]></content>
  </entry>
  
</feed>
