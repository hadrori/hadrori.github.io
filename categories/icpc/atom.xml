<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ICPC | Algoogle]]></title>
  <link href="http://algoogle.hadrori.jp/categories/icpc/atom.xml" rel="self"/>
  <link href="http://algoogle.hadrori.jp/"/>
  <updated>2015-07-30T15:13:28+09:00</updated>
  <id>http://algoogle.hadrori.jp/</id>
  <author>
    <name><![CDATA[hadrori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ACM-ICPC Tokyo Regional 2014 G Flipping Parentheses]]></title>
    <link href="http://algoogle.hadrori.jp/icpc/icpc2014tokyog/"/>
    <updated>2014-10-24T03:06:45+09:00</updated>
    <id>http://algoogle.hadrori.jp/icpc/icpc2014tokyog</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ICPCOOC2014&amp;pid=G">Flipping Parentheses</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>バランスのとれた括弧の列が与えられる.<br />
q個のクエリについてそれぞれ指定された場所の括弧を反転させ, 再びバランスのとれた状態にするために反転させるべき一番左の括弧を求めよ</p>

<h4 id="section-1">解法</h4>

<hr />

<p>開き括弧を+1, 閉じ括弧を-1とみる.<br />
その累積和を取ったとき, バランスのとれた括弧の列なら常に非負かつ最後に0になる.</p>

<p>すでにクエリの括弧は反転させたとする.<br />
閉じ括弧を開き括弧に変える場合, 一番左の閉じ括弧に変えればよい(上の条件は常に満たされる).<br />
開き括弧を閉じ括弧に変える場合, 以降の最小値が2以上であるような一番左の場所を探す.<br />
これは2分探索をすればよい.</p>

<p>区間の最小値はSegment-Treeを使えば良い.<br />
累積和の更新は区間に2もしくは-2を加える事でできる.<br />
区間に足し込むタイプのSegment-Treeは区間に一気に足した値保持することで大抵うまくいく.<br />
一番左の閉じ括弧はsetとかで持てばよいでしょう.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code ICPC/2014/Tokyo/G.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM-ICPC Tokyo Regional 2014 F There is No Alternative]]></title>
    <link href="http://algoogle.hadrori.jp/icpc/icpc2014tokyof/"/>
    <updated>2014-10-24T03:06:44+09:00</updated>
    <id>http://algoogle.hadrori.jp/icpc/icpc2014tokyof</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ICPCOOC2014&amp;pid=F">There is No Alternative</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>最小全域木を作るのに必ず必要になる辺の数とそのコストの和を求めよ</p>

<h4 id="section-1">解法</h4>

<hr />

<p>最小全域木を作ってみる.<br />
必ず必要な辺はそれに含まれる.<br />
あとはその辺それぞれを使わないで最小全域木を作り, 非連結か重さが増える場合必要.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code ICPC/2014/Tokyo/F.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM-ICPC Tokyo Regional 2014 E Automotive Navigation]]></title>
    <link href="http://algoogle.hadrori.jp/icpc/icpc2014tokyoe/"/>
    <updated>2014-10-24T03:06:43+09:00</updated>
    <id>http://algoogle.hadrori.jp/icpc/icpc2014tokyoe</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ICPCOOC2014&amp;pid=E">Automotive Navigation</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>x軸, y軸に平行な線分で繋がれたコースがある.<br />
今, 車のGPSが位置(x0, y0)で壊れた.<br />
以降単位時間毎にに前回の観測から移動した距離と現在の向いている向きを観測し報告する.<br />
向きは曲がり角にいる場合は曲る前と曲がった後のいずれかである.<br />
また車はUターンできない.<br />
時間tが経過したとき, 車の存在する場所としてありえる場所を列挙しろ.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>問題の時間をターンということにする.<br />
各座標について上下左右に移動可能かを入力からつくる.<br />
あとは毎ターン距離dを移動させるのをBFSする.<br />
状態が増えすぎるとあれなので,(位置, 向き, そのターンでの移動距離)で既にチェック済みか記録しておく.<br />
次のターンの開始状態としてあり得るものを候補に列挙していく.<br />
向きが移動したあとというのは次のターンで移動距離1の状態ということでつくる.<br />
答えにするときは戻せばよい.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code ICPC/2014/Tokyo/E.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM-ICPC Tokyo Regional 2014 D Space Golf]]></title>
    <link href="http://algoogle.hadrori.jp/icpc/icpc2014tokyod/"/>
    <updated>2014-10-24T03:06:42+09:00</updated>
    <id>http://algoogle.hadrori.jp/icpc/icpc2014tokyod</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ICPCOOC2014&amp;pid=D">Space Golf</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>弾を射出して距離dの位置の地面にちょうど当てたい.<br />
バウンドがb回まで許される.<br />
途中に障害物が立っているので避けなければならない.<br />
以上を満たす最小の初速を求めよ</p>

<h4 id="section-1">解法</h4>

<hr />

<p>バウンド回数ごとに分けて考える.<br />
長さxを飛ばすのに必要な初速は発射角を{% m %}\theta{% em %}とすると</p>

<p>{% math %}</p>

<p>\sqrt{\frac{x}{sin(2\theta)}}</p>

<p>{% endmath %}</p>

<p>つまり発射角は45度が基本的に最適.<br />
45度で不可能なら可能な最小の角が最適.<br />
正確には45度に一番近いものだが, 45度が無理ならそれ未満も無理なので最小の角になる.<br />
あとはバウンド回数ごとにminを取れば良い</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code ICPC/2014/Tokyo/D.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM-ICPC Tokyo Regional 2014 C Shopping]]></title>
    <link href="http://algoogle.hadrori.jp/icpc/icpc2014tokyoc/"/>
    <updated>2014-10-24T03:06:41+09:00</updated>
    <id>http://algoogle.hadrori.jp/icpc/icpc2014tokyoc</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ICPCOOC2014&amp;pid=C">Shopping</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>0が入り口, n+1が出口の道に1~nの店がある.<br />
dに行ってからcに行きたいという情報がm個来る.<br />
ただしc＜d<br />
これらを満たしつつ全ての店を回るのに必要な最小の移動距離を求めよ</p>

<h4 id="section-1">解法</h4>

<hr />

<p>与えられる各順番について, その区間はちょうど1回往復する.<br />
つまり被った区間はマージしてしまえばよい.<br />
被覆される区間の長さ*2+n+1<br />
が答え</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code ICPC/2014/Tokyo/C.cpp %}</p>
]]></content>
  </entry>
  
</feed>
