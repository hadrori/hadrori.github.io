<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: strongly-connected-component | Algoogle]]></title>
  <link href="http://algoogle.hadrori.jp/tags/strongly-connected-component/atom.xml" rel="self"/>
  <link href="http://algoogle.hadrori.jp/"/>
  <updated>2015-12-14T02:08:05+09:00</updated>
  <id>http://algoogle.hadrori.jp/</id>
  <author>
    <name><![CDATA[hadrori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Typical DP Contest R - グラフ]]></title>
    <link href="http://algoogle.hadrori.jp/tdpc/r/"/>
    <updated>2015-09-03T17:03:38+09:00</updated>
    <id>http://algoogle.hadrori.jp/tdpc/r</id>
    <content type="html"><![CDATA[<p><a href="http://tdpc.contest.atcoder.jp/tasks/tdpc_graph">R - グラフ</a></p>

<h4 id="section">問題概要</h4>

<hr />

<h4 id="section-1">解法</h4>

<hr />

<p>まずsccして閉路を潰して，DAGをつくる(潰した閉路の頂点数を重さとする新しい頂点を作る)．<br />
その上でトポロジカルソートしたものを考える．</p>

<p>2本の辺の先端をみるDPをする．<br />
dp[i][j] := 進んでる方の先端の位置がiでもう片方の先端の位置がjのときのそれまでに通った頂点数の最大値</p>

<p>また進む先はそこから到達可能ならどこでもよいが，現在のiより先に進むようにする．<br />
これはiまでの頂点はすでに通った頂点かもしれないため．</p>

<p>また進んだ先の頂点の重さだけ現在の値に足す．<br />
これも途中の頂点にすでに通った頂点があるかもしれないから．きちんと順に更新していけば結果は正しくなる．</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code TDPC/R.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ 2598 Website Tour]]></title>
    <link href="http://algoogle.hadrori.jp/aoj/2598/"/>
    <updated>2015-05-07T22:38:14+09:00</updated>
    <id>http://algoogle.hadrori.jp/aoj/2598</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2598">Website Tour</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>有向グラフ上のノードiでコスト{% m %}t_i{% em %}でポイント{% m %}p_i{% em %}が手に入る．<br />
ノードiでポイントが得られるのは{% m %}k_i{% em %}回まで．ただし同じノードでポイントを得るには1回以上の遷移が必要．<br />
コストの総和がT以内で得られるポイントの総和の最大を求めよ．</p>

<h4 id="section-1">解法</h4>

<hr />

<p>入力のグラフGを強連結成分分解する．各強連結成分を1つのノードとしたDAG(これをHとする)上でDPする．</p>

<p>dp[i][j] := 強連結成分iでコストj以下の時の最大の総ポイント</p>

<p>Hのノードはトポロジカルソートし，順にやればよい．<br />
Hの各ノードでの計算は個数制限ナップサックをすればよい．Hでのノードからノードへの遷移は各コストでのdp表のmaxをとる．<br />
ただしノードがGのノードを1つしか含まず，そのノードも自己ループを持たないときは1回しかそこを通れないので01ナップサック(個数制限を1にしたナップサック)をやる．</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code AOJ/2598.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JOI 春合宿 2011 Report]]></title>
    <link href="http://algoogle.hadrori.jp/joi/sc2011report/"/>
    <updated>2014-09-28T23:00:42+09:00</updated>
    <id>http://algoogle.hadrori.jp/joi/sc2011report</id>
    <content type="html"><![CDATA[<p><a href="http://joisc2011.contest.atcoder.jp/tasks/joisc2011_report">Report</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>N個の人がいる, 各人はその番号より小さい番号の人の仕事が終わってから始める.<br />
またそれぞれ仕事の報告をする相手が決まっている.<br />
報告を受けたらさらにその報告を回す.<br />
また2回以上報告を受ける場合は2回目以降は無視する.<br />
それぞれの人が仕事の開始時までに受ける報告の仕事の数を求めよ.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>閉路が存在する場合, その閉路内で報告が回せるので1つ塊としてみて良い.<br />
そこで閉路を強連結成分分解して潰す.<br />
そうすると複数の木ができるので各木で根からオイラーツアーして頂点に入るときと出るときに番号をふる.<br />
あとは各人が属する強連結成分について, そこに入ってから出るまでの部分木内で発生した報告の総数を求める.<br />
これはオイラーツアーしで振った番号で区間になるのでBITで管理すれば良い.<br />
仕事が完了したらその強連結成分に入るときの位置に1足せばその強連結成分内で発生した報告のカウントが出来る.</p>

<p>####</p>

<hr />

<p>{% include_code JOI/2011/report.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JOI 春合宿 2009 Advertisement]]></title>
    <link href="http://algoogle.hadrori.jp/joi/sc2009advertisement/"/>
    <updated>2014-09-06T16:24:12+09:00</updated>
    <id>http://algoogle.hadrori.jp/joi/sc2009advertisement</id>
    <content type="html"><![CDATA[<p><a href="http://joisc2009.contest.atcoder.jp/tasks/joisc2009_advertisement">Advertisement</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>誰が誰の連絡先を知っているかの情報が与えられる.<br />
このとき, 情報を最小何人に伝えれば全員に情報が行き渡ることができるか</p>

<h4 id="section-1">解法</h4>

<hr />

<p>有向グラフを考える.<br />
基本的には自分の連絡先を誰にも知られていない人に伝える.<br />
しかし閉路が存在するので閉路を潰してからそれを考える.<br />
閉路を潰すには強連結成分分解してidを振りなおしてやれば良い.<br />
あとは各強連結成分に他の成分から入ってくる辺が存在するかチェックしてやればよい.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code JOI/2009/Advertisement.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ 2222 Alien's Counting]]></title>
    <link href="http://algoogle.hadrori.jp/aoj/2222/"/>
    <updated>2014-06-05T19:17:51+09:00</updated>
    <id>http://algoogle.hadrori.jp/aoj/2222</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2222">Alien’s Counting</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>N本の指をもつエイリアンがいる. このエイリアンはある指を折るとどうしても一緒に折れてしまう指がM本ある.<br />
このときエイリアンの指の折り方は何通りあるでしょうか.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>入力からグラフを作って, 閉路になっている部分は強連結成分分解してまとめる.<br />
連結でないグラフ同士は独立して考えることができるので, それぞれの場合の数を求めて掛けあわせれば良い.</p>

<p>問題の制約から各ノードは最大でも1本しか辺が出て行かない.<br />
よって連結なグラフの中で辺が出て行かないノードはただ1つだけ存在する(枝分かれせず収束するしかないため).<br />
このことからグラフのトポロジカル順にDPすればよい.<br />
グラフのトポロジカル順は強連結成分分解の過程で簡単に求めることができる.<br />
またそのノードの指を折らない場合というのはその祖先も全て折らない場合なので常に1通りになる. よってその場合はいちいち数える必要はない.</p>

<p>dp[i] := ノードiを折る場合の数<br />
遷移は各ノードを見ているとき, そのノードが影響するノードに場合の数+1(折らない場合)を掛けあわせれば良い.<br />
あとは連結でないグラフ同士の場合の数を掛け合わせるだけ.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code AOJ/2222.cpp %}</p>
]]></content>
  </entry>
  
</feed>
