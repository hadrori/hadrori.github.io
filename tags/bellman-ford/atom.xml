<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: bellman-ford | Algoogle]]></title>
  <link href="http://algoogle.hadrori.jp/tags/bellman-ford/atom.xml" rel="self"/>
  <link href="http://algoogle.hadrori.jp/"/>
  <updated>2015-12-14T02:08:05+09:00</updated>
  <id>http://algoogle.hadrori.jp/</id>
  <author>
    <name><![CDATA[hadrori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ 1169 The Most Powerful Spell]]></title>
    <link href="http://algoogle.hadrori.jp/aoj/1169/"/>
    <updated>2015-03-24T17:48:48+09:00</updated>
    <id>http://algoogle.hadrori.jp/aoj/1169</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1169">The Most Powerful Spell</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>n個の頂点とm個の辺からなるグラフを考える.
各辺にはラベルとして1文字から6文字までの文字列がある.
始点から終点までのパスのラベルを順に繋げたものを呪文という.
辞書順最小の呪文を求めよ.<br />
ただし終点に到達不可能である場合や任意の呪文に対してそれより小さい呪文が存在する場合は”NO”と出力せよ.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>とりあえずループする場合は置いておく.<br />
普通の最短路みたいに始点から順にDPしたら以下の図のような例で死ぬ.<br />
<img src="/images/aoj1169-01.png" alt="aoj1169-01" /><br />
これを解消するために各頂点に対して長さごとの最小の文字列を持つのが考えられそう.<br />
しかしよく考えるとある頂点vから終点までの最小の呪文が決まってればどの辺から頂点vに来ればいいのかわかるので辺を逆向きにして終点からDPしてやれば良い.<br />
dp[i] := 頂点iから終点までで追加される呪文の接尾辞の最小</p>

<p>呪文が無限に小さくなるループがある場合について考える.<br />
ループがないなら呪文を作るパス上の頂点数は高々n.<br />
各辺は最大6文字のラベルをもつので6n文字以上にはなりえない.<br />
とりあえずBellman-Fordで7n回ぐらい回して上限を超えるようならNOとすればよい.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code AOJ/1169.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PKU 3259 Wormholes]]></title>
    <link href="http://algoogle.hadrori.jp/pku/3259/"/>
    <updated>2014-05-10T16:42:37+09:00</updated>
    <id>http://algoogle.hadrori.jp/pku/3259</id>
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=3259">Wormholes</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>グラフに負閉路があればYES, そうでなければNO.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>負閉路の検出はBellman-Fordを使うことでできる.<br />
Bellman-Fordでは負閉路がなければ更新は|V|-1回以下のループで終わるはずなので|V|回目も試してみて更新が起これば負閉路があることになる. whileで回った回数を数えてもよい.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code PKU/3259.cpp %}</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PKU 3169 Layout]]></title>
    <link href="http://algoogle.hadrori.jp/pku/3169/"/>
    <updated>2014-05-10T16:40:18+09:00</updated>
    <id>http://algoogle.hadrori.jp/pku/3169</id>
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=3169">Layout</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>仲の良い牛の組とよくない牛の組があり, 仲の良い牛とは一定以上(DL)離れたくないし, 嫌いな牛とは一定以上(DD)離れたい.<br />
また, 牛は番号順に並んでいる.<br />
そのとき1番の牛とN番の牛の距離の最大はいくらか.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>蟻本初級に載ってるけど絶対初級じゃないよなあ.</p>

<p>条件を式に直す.<br />
牛iと牛j(i &lt; j)が仲がいい時<br />
dist[j] - dist[i] &lt;= DL(i, j)<br />
仲が悪い時<br />
dist[j] - dist[i] &gt;= DD(i, j)<br />
また番号順に並んでいることより<br />
dist[i] &lt;= dist[i+1]<br /></p>

<p>最短路問題において, 有向辺e(i, j)の長さl(i, j)のときその辺に依る距離の関係は<br />
dist[i] + l(i, j) &gt;= dist[j]<br /></p>

<p>このことを利用すると上の条件を以下のように変形してグラフ上の最短路問題に帰着することができる.<br />
仲がいい時: dist[i] + DL(i, j) &gt;= dist[j]<br />
仲が悪い時: dist[j] + (-DD(i, j)) &gt;= dist[i]<br />
番号順: dist[i+1] + 0 &gt;= dist[i]<br /></p>

<p>これにより, N番目の牛までの最短距離が求められる. またこれは配置可能な中でN番目までの距離の最大の値になる.<br />
なぜならDLによってでしか各牛の距離は増加せず, DLは各関係の最大になっているから.<br />
またそのことから, もしそのような辺によって値が更新されないとき, その牛と0番目の牛の距離は無限に大きくできることがわかる.<br /></p>

<p>また負閉路が存在するとき, その閉路によって無限に値が小さくなり, それより前の牛の位置もどんどん小さくなるはず(番号順).<br />
よって0番目の牛の位置が負のとき負閉路が存在する.<br />
負閉路が存在するということは, 距離の関係に矛盾が生じている.<br />
なぜならその区間の増やせる距離の大きさより大きく距離をとっていることになるからである.<br /></p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code PKU/3169.cpp %}</p>

]]></content>
  </entry>
  
</feed>
