<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: segment-tree | Algoogle]]></title>
  <link href="http://algoogle.hadrori.jp/tags/segment-tree/atom.xml" rel="self"/>
  <link href="http://algoogle.hadrori.jp/"/>
  <updated>2015-07-30T15:13:28+09:00</updated>
  <id>http://algoogle.hadrori.jp/</id>
  <author>
    <name><![CDATA[hadrori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ 2450 Do use segment tree]]></title>
    <link href="http://algoogle.hadrori.jp/aoj/2450/"/>
    <updated>2015-04-01T01:33:40+09:00</updated>
    <id>http://algoogle.hadrori.jp/aoj/2450</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2450">Do use segment tree</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>各頂点に重さを持つn(&lt;=200,000)頂点の木が与えられる.<br />
以下のクエリが合計でq(&lt;=100,000)個くるのでその中の出力クエリに答えろ.</p>

<ul>
  <li>頂点aからbへのパス上の頂点の値をcに変更する</li>
  <li>頂点aからbへのパス上の連続する頂点の和の最大</li>
</ul>

<h4 id="section-1">解法</h4>

<hr />

<p>木をHL分解してセグ木で殴るだけ</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code AOJ/2450.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ 1068 School of Killifish]]></title>
    <link href="http://algoogle.hadrori.jp/aoj/1068/"/>
    <updated>2015-03-27T00:58:41+09:00</updated>
    <id>http://algoogle.hadrori.jp/aoj/1068</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1068">School of Killifish</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>2次元グリッド上(面積は最大でも1,000,000)についてq(&lt;=1,000)個のクエリを捌く.<br />
各クエリはグリッド上の部分長方形内の最小値を聞くもの.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>2次元segtreeを書けば良い.<br />
ただしvectorで配列を取ったりするとMLEするので配列で書くこと.<br />
縦横の上限で配列は取れないので1次元配列に展開する.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>コメントアウトされてるのはvectorで実装したもの.</p>

<p>{% include_code AOJ/1068.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM-ICPC Tokyo Regional 2014 G Flipping Parentheses]]></title>
    <link href="http://algoogle.hadrori.jp/icpc/icpc2014tokyog/"/>
    <updated>2014-10-24T03:06:45+09:00</updated>
    <id>http://algoogle.hadrori.jp/icpc/icpc2014tokyog</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ICPCOOC2014&amp;pid=G">Flipping Parentheses</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>バランスのとれた括弧の列が与えられる.<br />
q個のクエリについてそれぞれ指定された場所の括弧を反転させ, 再びバランスのとれた状態にするために反転させるべき一番左の括弧を求めよ</p>

<h4 id="section-1">解法</h4>

<hr />

<p>開き括弧を+1, 閉じ括弧を-1とみる.<br />
その累積和を取ったとき, バランスのとれた括弧の列なら常に非負かつ最後に0になる.</p>

<p>すでにクエリの括弧は反転させたとする.<br />
閉じ括弧を開き括弧に変える場合, 一番左の閉じ括弧に変えればよい(上の条件は常に満たされる).<br />
開き括弧を閉じ括弧に変える場合, 以降の最小値が2以上であるような一番左の場所を探す.<br />
これは2分探索をすればよい.</p>

<p>区間の最小値はSegment-Treeを使えば良い.<br />
累積和の更新は区間に2もしくは-2を加える事でできる.<br />
区間に足し込むタイプのSegment-Treeは区間に一気に足した値保持することで大抵うまくいく.<br />
一番左の閉じ括弧はsetとかで持てばよいでしょう.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code ICPC/2014/Tokyo/G.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JOI 春合宿 2011 Apples]]></title>
    <link href="http://algoogle.hadrori.jp/joi/sc2011apples/"/>
    <updated>2014-09-30T23:29:55+09:00</updated>
    <id>http://algoogle.hadrori.jp/joi/sc2011apples</id>
    <content type="html"><![CDATA[<p><a href="http://joisc2011.contest.atcoder.jp/tasks/joisc2011_apples">Apples</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>M(&lt;=100,000)個のクエリを処理する.</p>

<ul>
  <li>
    <p>クエリA: 濃さD[i](&lt;=1,000,000,000)のリンゴを1つ入荷する</p>
  </li>
  <li>
    <p>クエリR: リンゴをN[i](&lt;=100,000)個, その全ての組の濃さの差がB(&lt;=1,000,000,000)以内になるようなもののうち濃さの総和が最大になるようなものを出荷する</p>
  </li>
</ul>

<h4 id="section-1">解法</h4>

<hr />

<p>各リンゴの濃さに対してその後ろに幅Bの区間を考える.<br />
その区間が重なる数をみると, 濃さのバラつきがB以内となるものの数がわかる.<br />
これを各区間での最大値をもち, 区間に値を加えるsegment-treeで考えれば良い.<br />
N[i]以上になる一番濃い場所を探すには各区間での最大値をもち, 条件を満たすようなものを右側優先に潜っていけばよい.</p>

<p>問題では濃さの値が大きいが入荷するリンゴは高々10^5個, つまり濃さの種類は高々10^5.<br />
segment-treeの各ノードを全て持つと当然まずいので必要になったら作る感じでやる.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code JOI/2011/apples.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JOI 春合宿 2011 Bookshelf]]></title>
    <link href="http://algoogle.hadrori.jp/joi/sc2011bookshelf/"/>
    <updated>2014-09-30T01:23:38+09:00</updated>
    <id>http://algoogle.hadrori.jp/joi/sc2011bookshelf</id>
    <content type="html"><![CDATA[<p><a href="http://joisc2011.contest.atcoder.jp/tasks/joisc2011_bookshelf">Bookshelf</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>1からNまでの番号が振られた本がN冊適当にならんでいる.<br />
今これを以下の操作で番号の昇順に直したい.<br />
本を一冊選んで取り出す.<br />
取り出された本を任意の位置に戻す.<br />
この時コストがそれぞれA[i] (iは本の番号)かかるとき, 最小のコストを求めよ</p>

<h4 id="section-1">解法</h4>

<hr />

<p>動かさない本のコストを最大化する.<br />
始めの本の列を左から見ていく.<br />
今見ている本の番号をiとし, iを動かさない時を考える.<br />
iまでで動かさないコストの総和の最大は, iの始めの位置より左にあるもののうち, 番号がiより小さい一番右の本までで動かさないコストの総和の最大にiのコストを足したものになる.<br />
これは始めの列の順でも昇順になっていたもの同士のため.<br />
始めの列で位置関係が違う本同士では必ずどちらかが動く.</p>

<p>あとは一番右に来るのはiより前までのうちコストの総和の最大にもなるのでそれにiのコストを足せばiまでで動かさないコストの総和の最大が求まる.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code JOI/2011/bookshelf.cpp %}</p>
]]></content>
  </entry>
  
</feed>
