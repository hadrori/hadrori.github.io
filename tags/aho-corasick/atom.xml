<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: aho-corasick | Algoogle]]></title>
  <link href="http://algoogle.hadrori.jp/tags/aho-corasick/atom.xml" rel="self"/>
  <link href="http://algoogle.hadrori.jp/"/>
  <updated>2015-07-30T15:13:28+09:00</updated>
  <id>http://algoogle.hadrori.jp/</id>
  <author>
    <name><![CDATA[hadrori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JOI 春合宿 2010 DNA Synthesizer]]></title>
    <link href="http://algoogle.hadrori.jp/joi/sc2010dna/"/>
    <updated>2014-09-15T02:44:24+09:00</updated>
    <id>http://algoogle.hadrori.jp/joi/sc2010dna</id>
    <content type="html"><![CDATA[<p><a href="http://joisc2010.contest.atcoder.jp/tasks/joisc2010_dna">DNA Synthesizer</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>DNAはATGCの4つの文字から成る.<br />
今N個の素DNAがある(長さはそれぞれ高々20).<br />
あるDNAを作りたいとき, 素DNA同士を長さ1以上重なるようにつなげることで作ることができる.<br />
素DNAはそれぞれ何個でも使える.<br />
最小何個の素DNAで目的のDNAを作れるか.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>Aho-Corasick法で目的のDNAの各位置でパターン(素DNA)とマッチするかみる.<br />
このときマッチするもののうち, 最長のものだけ見れば良い.<br />
あとはDPすればよい.<br />
dp[i] := i文字目までつくるのに必要な最小の素DNAの数<br />
更新はマッチした部分の中でdpが最小になっている部分+1でできる.<br />
これはSegment-Treeを用いることで効率的にできるが, 今回はパターンの長さが高々20なので愚直に更新してもよい.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code JOI/2010/dna.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codeforces 434C Tachibana Kanade's Tofu]]></title>
    <link href="http://algoogle.hadrori.jp/codeforces/434c/"/>
    <updated>2014-07-24T22:05:12+09:00</updated>
    <id>http://algoogle.hadrori.jp/codeforces/434c</id>
    <content type="html"><![CDATA[<p><a href="http://codeforces.com/problemset/problem/434/C">Tachibana Kanade’s Tofu</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>m進数のn個のパターンとそのそれぞれにスコアv[i](0&lt;=i&lt;n)が与えられる.<br />
m進数の区間[l,r]の値xについて, そのxの一部分にパターンiをu個含む場合v[i]*uだけxのスコアに加える.<br />
このとき, 区間[l,r]にスコアがkを超えないものはいくつあるか.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>桁DPする.<br />
[l,r]なので[0,r]と[0,l-1]に分けてやることで下を無視する.<br />
上限は現在まで上限に沿ってきているかどうかの状態をDPに持たせる.<br />
パターンにマッチするかはAho-Corasickでオートマトンを生成し, 各状態をDPに持たせれば良い.<br />
またパターンにleading-0が含まれるのでDPの状態に現在の値がleading-0かどうかの状態も持たせる.<br />
またスコアはKより大きい数はいらないので無視するかまとめて使わない部分に足してしまう.<br />
dp[digit][state][min(K+1,score)][is leading-0][is upper bound]<br />
みたいにすればよい.<br />
あとは素直にループを回せば良い</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code Codeforces/434C.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ 2212 Stolen Jewel]]></title>
    <link href="http://algoogle.hadrori.jp/aoj/2212/"/>
    <updated>2014-05-04T15:04:37+09:00</updated>
    <id>http://algoogle.hadrori.jp/aoj/2212</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2212">Stolen Jewel</a></p>

<h4 id="section">問題概要</h4>

<hr />

<h4 id="section-1">解法</h4>

<hr />

<p>禁止パターンはAho-Corasickで検出する。
各地点の座標とそのときのTrie木の位置でBFSする。
ゴールに辿りつけなかったら-1</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code AOJ/2212.cpp %}</p>

]]></content>
  </entry>
  
</feed>
