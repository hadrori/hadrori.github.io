<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: implementation | Algoogle]]></title>
  <link href="http://algoogle.hadrori.jp/tags/implementation/atom.xml" rel="self"/>
  <link href="http://algoogle.hadrori.jp/"/>
  <updated>2015-12-14T02:08:05+09:00</updated>
  <id>http://algoogle.hadrori.jp/</id>
  <author>
    <name><![CDATA[hadrori]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AOJ 2632 Dense Amidakuji]]></title>
    <link href="http://algoogle.hadrori.jp/aoj/2632/"/>
    <updated>2015-04-29T19:15:43+09:00</updated>
    <id>http://algoogle.hadrori.jp/aoj/2632</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2632">Dense Amidakuji</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>w(&lt;=200000)本の縦棒からなるあみだくじがある．<br />
縦棒の高さはh(&lt;=200000)で，横線を高さが整数の部分の隣接する縦棒間における．<br />
今，a≡b(mod 2)となるすべての位置(a,b)から右に横棒を置く．<br />
ここからn(&lt;=200000)本の横棒を指定されたように除去するとき，あみだくじの結果はどうなるか．</p>

<h4 id="section-1">解法</h4>

<hr />

<p>除去前のあみだくじは規則正しく，高さが2wの周期で同じになっている．<br />
横棒を取り除くという操作は，その両端にくる値の結果の位置を入れ替えることに相当する．<br />
つまりどこからその値がきているかを調べ，その値を入れ替えて横棒自体にはなにもしなくてよい．<br />
ただし，あみだくじの性質上値は上から下へ結果が伝播するので取り除く操作は上から順にやる．<br />
あとはどこから来たかだが，このあみだくじは端から端まで階段を降りるような形なのでその逆をやればよい．<br />
ただし端から端へは1段ずつではなく一気にいくことと，高さが2wの周期で同じなのでその分だけ調べること．</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code AOJ/2632.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ 0536 Shuffle]]></title>
    <link href="http://algoogle.hadrori.jp/aoj/0536/"/>
    <updated>2015-03-25T03:25:10+09:00</updated>
    <id>http://algoogle.hadrori.jp/aoj/0536</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0536">Shuffle</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>n(&lt;=1,000,000,000)枚の1からnまでの数字が書かれたカードがある.<br />
上から1枚目からx枚目とy枚目からn枚目までのカードの位置をまとめて入れ替える.<br />
このような操作をm(&lt;=5,000)回分与える.<br />
操作後, 上からp枚目からq枚目までのr以下の数字が書かれたカードの枚数を答えよ.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>r以下の数の区間を持つ.<br />
あとは区間の列に対して区間を切り取る操作さえ書ければよい.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code AOJ/0536.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AOJ 1023 Amazing Graze]]></title>
    <link href="http://algoogle.hadrori.jp/aoj/1023/"/>
    <updated>2015-03-25T00:32:03+09:00</updated>
    <id>http://algoogle.hadrori.jp/aoj/1023</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1023">Amazing Graze</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>2次元空間上にAN個の戦闘機とBN個の弾がある.<br />
戦闘機の戦闘力は半径4R以内にある弾の数になる. 戦闘力の総和を求めよ.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>戦闘機ごとに全ての弾と判定していてはだめ.<br />
弾をx座標ごとに分けて, 戦闘機の前後4Rのx座標にある弾のうち, 上下4Rのy座標にある弾と判定する.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code AOJ/1023.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ONTAK 2007 Hyperclock]]></title>
    <link href="http://algoogle.hadrori.jp/ontak/ontak2007hyperclock/"/>
    <updated>2014-10-29T00:04:04+09:00</updated>
    <id>http://algoogle.hadrori.jp/ontak/ontak2007hyperclock</id>
    <content type="html"><![CDATA[<p><a href="http://main.edu.pl/en/archive/ontak/2007/hip">Hyperclock</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>N個の針が1つだけある時計がある. それぞれ盤上には{% m %}k_i{% em %}個の番号が1から振られている.<br />
そのN個の時計の針の位置の組によって時刻を決定する時計Hyperclockを考える.<br />
時計を1つ選んで針を1つ進めるか戻すかの操作ができるとき, ありうる全ての組をちょうど1度だけ示し, 初期状態に戻るような操作方法を示せ.<br />
ただし全ての時計は始め1を指しているとし, そのような操作が存在しない場合はNIE(ポーランド語でNOの意)と表示せよ.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>ONTAKとはポーランドのOI系の合宿.<br />
この問題は必ず条件を満たす操作方法が存在する.</p>

<p>2つの時計u, vについて2次元の表(縦軸をu, 横軸をv)で考える.<br />
{% m %}k_v{% em %}が偶数の場合<br />
uを1から{% m %}k_u{% em %}までおろして, vを1進め, 今度はuを{% m %}k_u{% em %}から1まで戻して…とやればよい.<br />
これで最終的に初期状態に戻る.<br />
{% m %}k_v{% em %}が奇数の場合<br />
uを1から{% m %}k_u-1{% em %}まで動かして, vを1進め, 今度はuを{% m %}k_u-1{% em %}から1まで戻して…とやる.<br />
この時点で針はそれぞれ{% m %}k_u-1{% em %}と{% m %}k_v{% em %}を指している.<br />
今表の一番下だけ一度も通っていない状態.<br />
よってこれをさらに1つ下げてvの針を{% m %}k_v{% em %}から1まで戻せば良い.<br />
あとはuを1進めるだけで初期状態に戻る.</p>

<p>時計が2つでできたら, その操作列を1つの時計としてみる.<br />
あとはそれを次の時計, 更に次の時計, と組み合わせていけば良い.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code ONTAK/2007/hyperclock.cpp %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM-ICPC Tokyo Regional 2014 E Automotive Navigation]]></title>
    <link href="http://algoogle.hadrori.jp/icpc/icpc2014tokyoe/"/>
    <updated>2014-10-24T03:06:43+09:00</updated>
    <id>http://algoogle.hadrori.jp/icpc/icpc2014tokyoe</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/cdescription.jsp?cid=ICPCOOC2014&amp;pid=E">Automotive Navigation</a></p>

<h4 id="section">問題概要</h4>

<hr />

<p>x軸, y軸に平行な線分で繋がれたコースがある.<br />
今, 車のGPSが位置(x0, y0)で壊れた.<br />
以降単位時間毎にに前回の観測から移動した距離と現在の向いている向きを観測し報告する.<br />
向きは曲がり角にいる場合は曲る前と曲がった後のいずれかである.<br />
また車はUターンできない.<br />
時間tが経過したとき, 車の存在する場所としてありえる場所を列挙しろ.</p>

<h4 id="section-1">解法</h4>

<hr />

<p>問題の時間をターンということにする.<br />
各座標について上下左右に移動可能かを入力からつくる.<br />
あとは毎ターン距離dを移動させるのをBFSする.<br />
状態が増えすぎるとあれなので,(位置, 向き, そのターンでの移動距離)で既にチェック済みか記録しておく.<br />
次のターンの開始状態としてあり得るものを候補に列挙していく.<br />
向きが移動したあとというのは次のターンで移動距離1の状態ということでつくる.<br />
答えにするときは戻せばよい.</p>

<h4 id="section-2">コード</h4>

<hr />

<p>{% include_code ICPC/2014/Tokyo/E.cpp %}</p>
]]></content>
  </entry>
  
</feed>
